Base class function and members are inherited by child class if they are public or protected. 
But there is a catch:

 class Child : public Parent {}. => public members of base class in inherited by child class and they are also public. 
 class Child : private Parent {} => public members of base class in inherited by child class but they are private in child class.
 
 Check this link for example:
https://www.programiz.com/cpp-programming/public-protected-private-inheritance#:~:text=public%2C%20protected%20and%20private%20inheritance%20in%20C%2B%2B&text=protected%20inheritance%20makes%20the%20public,private%20in%20the%20derived%20class




==================================== Constructor with Inheritence================

So when a object is created, its default contructor is called. But what happens with inheritence ?
So if class Derived has derived from Class Base, and from main, we create Derived d object, then first base constructor will be called and then derived class
contructor will be called. 

1. Check below example:

class Parent {
	int x;

public:
	Parent(int i)
	{
		x = i;
		cout << "Inside base class's parameterized "
				"constructor"
			<< endl;
	}
};

// sub class
class Child : public Parent {
public:
	// sub class's parameterized constructor
	Child(int x)
	{
		cout << "Inside sub class's parameterized "
				"constructor"
			<< endl;
	}
};

// main function
int main()
{

	Child obj1(10);
	return 0;
}

This will give error because, when childs constructor is called, it will try to call default constructor of parent which is not present. 

So there are two ways to resolve this:
(a) Call Parent Constructor also from child class like this:

Child(int x):Parent(10)

(b) Create a default constructor in Parent class.

2. What is case of Multiple inheritence, that is Class C is derived from A and B.

#include <iostream>
using namespace std;

// first base class
class Parent1
{
 public:

	Parent1()
	{
		cout << "Inside first base class" << endl;
	}
};

class Parent2
{
	public:

	Parent2()
	{
		cout << "Inside second base class" << endl;
	}
};

// child class inherits Parent1 and Parent2
class Child : public Parent1, public Parent2
{
	public:

	Child()
	{
		cout << "Inside child class" << endl;
	}
};

int main() {

	Child obj1;
	return 0;
}


Which contructor will be called first ?

So in this case, order in which they are called is just the order in which they are inherited => so Parent1, Parent2, Child.

3. It is straight forward for Hierarchial inheritance. 










